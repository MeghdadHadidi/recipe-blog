{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.44188191712c3dbe8433.hot-update.js","sources":["webpack:///./middleware/asyncActionsMiddleware.js","webpack:///./store.js"],"sourcesContent":["const asyncActionsMiddleware = store => next => action => {\r\n    const isActionAsync = action.hasOwnProperty(\"async\")\r\n\r\n    if (!isActionAsync) {\r\n        next(action)\r\n    } else {\r\n        const { httpMethodToInvoke, params, type } = action\r\n        const inProgressType = generateInProgressTypeName(type)\r\n\r\n        Promise.resolve(1).then(() => store.dispatch({ type: inProgressType }))\r\n        httpMethodToInvoke(...params)\r\n            .then(result => {\r\n                const successType = generateSuccessTypeName(type)\r\n                Promise.resolve(1).then(() =>\r\n                    store.dispatch({\r\n                        type: successType,\r\n                        ...result\r\n                    })\r\n                )\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Middleware -> HttpMethodCall -> \", err)\r\n                const errType = generateErrorTypeName(type)\r\n                Promise.resolve(1).then(() =>\r\n                    store.dispatch({ type: errType, err })\r\n                )\r\n            })\r\n\r\n        return next(action)\r\n    }\r\n}\r\n\r\nconst generateInProgressTypeName = actionName => {\r\n    return `${actionName}_INP_ROGRESS`\r\n}\r\n\r\nconst generateErrorTypeName = actionName => {\r\n    return `${actionName}_ERROR`\r\n}\r\n\r\nconst generateSuccessTypeName = actionName => {\r\n    return `${actionName}_SUCCESS`\r\n}\r\n\r\nexport default {\r\n    generateErrorTypeName,\r\n    generateInProgressTypeName,\r\n    generateSuccessTypeName,\r\n    asyncActionsMiddleware\r\n}\r\n","import { applyMiddleware, createStore, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport asyncActionsMiddleware from \"./middleware/asyncActionsMiddleware\"\r\nimport rootReducer from \"./reducers\"\r\n\r\nconst enhancers = []\r\nconst middlewares = [thunk, asyncActionsMiddleware]\r\n\r\nconst composedEnhancers = compose(\r\n    applyMiddleware(...middlewares),\r\n    ...enhancers\r\n)\r\n\r\nconst configureStore = (initialState, options) => {\r\n    return createStore(rootReducer, initialState, composedEnhancers)\r\n}\r\n\r\nexport default configureStore\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AADA;AADA;AAMA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AA9BA;AAAA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}